// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/merchant.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MerchantService service

func NewMerchantServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MerchantService service

type MerchantService interface {
	FindOneByID(ctx context.Context, in *MerchantID, opts ...client.CallOption) (*Merchant, error)
	FindOneByEmail(ctx context.Context, in *MerchantEmail, opts ...client.CallOption) (*Merchant, error)
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (MerchantService_FindAllService, error)
	Create(ctx context.Context, in *MerchantCreateReq, opts ...client.CallOption) (*Merchant, error)
	Update(ctx context.Context, in *MerchantUpdateReq, opts ...client.CallOption) (*Merchant, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*emptypb.Empty, error)
}

type merchantService struct {
	c    client.Client
	name string
}

func NewMerchantService(name string, c client.Client) MerchantService {
	return &merchantService{
		c:    c,
		name: name,
	}
}

func (c *merchantService) FindOneByID(ctx context.Context, in *MerchantID, opts ...client.CallOption) (*Merchant, error) {
	req := c.c.NewRequest(c.name, "MerchantService.FindOneByID", in)
	out := new(Merchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) FindOneByEmail(ctx context.Context, in *MerchantEmail, opts ...client.CallOption) (*Merchant, error) {
	req := c.c.NewRequest(c.name, "MerchantService.FindOneByEmail", in)
	out := new(Merchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) FindAll(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (MerchantService_FindAllService, error) {
	req := c.c.NewRequest(c.name, "MerchantService.FindAll", &emptypb.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &merchantServiceFindAll{stream}, nil
}

type MerchantService_FindAllService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*Merchant, error)
}

type merchantServiceFindAll struct {
	stream client.Stream
}

func (x *merchantServiceFindAll) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *merchantServiceFindAll) Close() error {
	return x.stream.Close()
}

func (x *merchantServiceFindAll) Context() context.Context {
	return x.stream.Context()
}

func (x *merchantServiceFindAll) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *merchantServiceFindAll) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *merchantServiceFindAll) Recv() (*Merchant, error) {
	m := new(Merchant)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *merchantService) Create(ctx context.Context, in *MerchantCreateReq, opts ...client.CallOption) (*Merchant, error) {
	req := c.c.NewRequest(c.name, "MerchantService.Create", in)
	out := new(Merchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) Update(ctx context.Context, in *MerchantUpdateReq, opts ...client.CallOption) (*Merchant, error) {
	req := c.c.NewRequest(c.name, "MerchantService.Update", in)
	out := new(Merchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "MerchantService.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MerchantService service

type MerchantServiceHandler interface {
	FindOneByID(context.Context, *MerchantID, *Merchant) error
	FindOneByEmail(context.Context, *MerchantEmail, *Merchant) error
	FindAll(context.Context, *emptypb.Empty, MerchantService_FindAllStream) error
	Create(context.Context, *MerchantCreateReq, *Merchant) error
	Update(context.Context, *MerchantUpdateReq, *Merchant) error
	Delete(context.Context, *DeleteReq, *emptypb.Empty) error
}

func RegisterMerchantServiceHandler(s server.Server, hdlr MerchantServiceHandler, opts ...server.HandlerOption) error {
	type merchantService interface {
		FindOneByID(ctx context.Context, in *MerchantID, out *Merchant) error
		FindOneByEmail(ctx context.Context, in *MerchantEmail, out *Merchant) error
		FindAll(ctx context.Context, stream server.Stream) error
		Create(ctx context.Context, in *MerchantCreateReq, out *Merchant) error
		Update(ctx context.Context, in *MerchantUpdateReq, out *Merchant) error
		Delete(ctx context.Context, in *DeleteReq, out *emptypb.Empty) error
	}
	type MerchantService struct {
		merchantService
	}
	h := &merchantServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MerchantService{h}, opts...))
}

type merchantServiceHandler struct {
	MerchantServiceHandler
}

func (h *merchantServiceHandler) FindOneByID(ctx context.Context, in *MerchantID, out *Merchant) error {
	return h.MerchantServiceHandler.FindOneByID(ctx, in, out)
}

func (h *merchantServiceHandler) FindOneByEmail(ctx context.Context, in *MerchantEmail, out *Merchant) error {
	return h.MerchantServiceHandler.FindOneByEmail(ctx, in, out)
}

func (h *merchantServiceHandler) FindAll(ctx context.Context, stream server.Stream) error {
	m := new(emptypb.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MerchantServiceHandler.FindAll(ctx, m, &merchantServiceFindAllStream{stream})
}

type MerchantService_FindAllStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Merchant) error
}

type merchantServiceFindAllStream struct {
	stream server.Stream
}

func (x *merchantServiceFindAllStream) Close() error {
	return x.stream.Close()
}

func (x *merchantServiceFindAllStream) Context() context.Context {
	return x.stream.Context()
}

func (x *merchantServiceFindAllStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *merchantServiceFindAllStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *merchantServiceFindAllStream) Send(m *Merchant) error {
	return x.stream.Send(m)
}

func (h *merchantServiceHandler) Create(ctx context.Context, in *MerchantCreateReq, out *Merchant) error {
	return h.MerchantServiceHandler.Create(ctx, in, out)
}

func (h *merchantServiceHandler) Update(ctx context.Context, in *MerchantUpdateReq, out *Merchant) error {
	return h.MerchantServiceHandler.Update(ctx, in, out)
}

func (h *merchantServiceHandler) Delete(ctx context.Context, in *DeleteReq, out *emptypb.Empty) error {
	return h.MerchantServiceHandler.Delete(ctx, in, out)
}
