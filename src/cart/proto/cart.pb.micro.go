// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cart.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	FindOneByID(ctx context.Context, in *CartID, opts ...client.CallOption) (*Cart, error)
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (CartService_FindAllService, error)
	FindAllByCustomerID(ctx context.Context, in *CustomerID, opts ...client.CallOption) (CartService_FindAllByCustomerIDService, error)
	Create(ctx context.Context, in *CartCreateReq, opts ...client.CallOption) (*Cart, error)
	Update(ctx context.Context, in *CartUpdateReq, opts ...client.CallOption) (*Cart, error)
	Delete(ctx context.Context, in *CartID, opts ...client.CallOption) (*emptypb.Empty, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) FindOneByID(ctx context.Context, in *CartID, opts ...client.CallOption) (*Cart, error) {
	req := c.c.NewRequest(c.name, "CartService.FindOneByID", in)
	out := new(Cart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) FindAll(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (CartService_FindAllService, error) {
	req := c.c.NewRequest(c.name, "CartService.FindAll", &emptypb.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &cartServiceFindAll{stream}, nil
}

type CartService_FindAllService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*Cart, error)
}

type cartServiceFindAll struct {
	stream client.Stream
}

func (x *cartServiceFindAll) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *cartServiceFindAll) Close() error {
	return x.stream.Close()
}

func (x *cartServiceFindAll) Context() context.Context {
	return x.stream.Context()
}

func (x *cartServiceFindAll) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cartServiceFindAll) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cartServiceFindAll) Recv() (*Cart, error) {
	m := new(Cart)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartService) FindAllByCustomerID(ctx context.Context, in *CustomerID, opts ...client.CallOption) (CartService_FindAllByCustomerIDService, error) {
	req := c.c.NewRequest(c.name, "CartService.FindAllByCustomerID", &CustomerID{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &cartServiceFindAllByCustomerID{stream}, nil
}

type CartService_FindAllByCustomerIDService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*Cart, error)
}

type cartServiceFindAllByCustomerID struct {
	stream client.Stream
}

func (x *cartServiceFindAllByCustomerID) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *cartServiceFindAllByCustomerID) Close() error {
	return x.stream.Close()
}

func (x *cartServiceFindAllByCustomerID) Context() context.Context {
	return x.stream.Context()
}

func (x *cartServiceFindAllByCustomerID) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cartServiceFindAllByCustomerID) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cartServiceFindAllByCustomerID) Recv() (*Cart, error) {
	m := new(Cart)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartService) Create(ctx context.Context, in *CartCreateReq, opts ...client.CallOption) (*Cart, error) {
	req := c.c.NewRequest(c.name, "CartService.Create", in)
	out := new(Cart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Update(ctx context.Context, in *CartUpdateReq, opts ...client.CallOption) (*Cart, error) {
	req := c.c.NewRequest(c.name, "CartService.Update", in)
	out := new(Cart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Delete(ctx context.Context, in *CartID, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "CartService.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	FindOneByID(context.Context, *CartID, *Cart) error
	FindAll(context.Context, *emptypb.Empty, CartService_FindAllStream) error
	FindAllByCustomerID(context.Context, *CustomerID, CartService_FindAllByCustomerIDStream) error
	Create(context.Context, *CartCreateReq, *Cart) error
	Update(context.Context, *CartUpdateReq, *Cart) error
	Delete(context.Context, *CartID, *emptypb.Empty) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		FindOneByID(ctx context.Context, in *CartID, out *Cart) error
		FindAll(ctx context.Context, stream server.Stream) error
		FindAllByCustomerID(ctx context.Context, stream server.Stream) error
		Create(ctx context.Context, in *CartCreateReq, out *Cart) error
		Update(ctx context.Context, in *CartUpdateReq, out *Cart) error
		Delete(ctx context.Context, in *CartID, out *emptypb.Empty) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) FindOneByID(ctx context.Context, in *CartID, out *Cart) error {
	return h.CartServiceHandler.FindOneByID(ctx, in, out)
}

func (h *cartServiceHandler) FindAll(ctx context.Context, stream server.Stream) error {
	m := new(emptypb.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CartServiceHandler.FindAll(ctx, m, &cartServiceFindAllStream{stream})
}

type CartService_FindAllStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Cart) error
}

type cartServiceFindAllStream struct {
	stream server.Stream
}

func (x *cartServiceFindAllStream) Close() error {
	return x.stream.Close()
}

func (x *cartServiceFindAllStream) Context() context.Context {
	return x.stream.Context()
}

func (x *cartServiceFindAllStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cartServiceFindAllStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cartServiceFindAllStream) Send(m *Cart) error {
	return x.stream.Send(m)
}

func (h *cartServiceHandler) FindAllByCustomerID(ctx context.Context, stream server.Stream) error {
	m := new(CustomerID)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CartServiceHandler.FindAllByCustomerID(ctx, m, &cartServiceFindAllByCustomerIDStream{stream})
}

type CartService_FindAllByCustomerIDStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Cart) error
}

type cartServiceFindAllByCustomerIDStream struct {
	stream server.Stream
}

func (x *cartServiceFindAllByCustomerIDStream) Close() error {
	return x.stream.Close()
}

func (x *cartServiceFindAllByCustomerIDStream) Context() context.Context {
	return x.stream.Context()
}

func (x *cartServiceFindAllByCustomerIDStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cartServiceFindAllByCustomerIDStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cartServiceFindAllByCustomerIDStream) Send(m *Cart) error {
	return x.stream.Send(m)
}

func (h *cartServiceHandler) Create(ctx context.Context, in *CartCreateReq, out *Cart) error {
	return h.CartServiceHandler.Create(ctx, in, out)
}

func (h *cartServiceHandler) Update(ctx context.Context, in *CartUpdateReq, out *Cart) error {
	return h.CartServiceHandler.Update(ctx, in, out)
}

func (h *cartServiceHandler) Delete(ctx context.Context, in *CartID, out *emptypb.Empty) error {
	return h.CartServiceHandler.Delete(ctx, in, out)
}
